// Spacing
$sizes: (
 "0": 0,
 "4": 0.25rem,
 "8": 0.5rem,
 "16": 1rem
);

$grid-breakpoints: (
 xs: 0,
 sm: 576px,
 md: 768px,
 lg: 992px,
 xl: 1200px,
 xxl: 1400px
);

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
 $min: map-get($breakpoints, $name);
 @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
 @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
 $min: breakpoint-min($name, $breakpoints);
 @if $min {
  @media (min-width: $min) {
   @content;
  }
 } @else {
  @content;
 }
}

@mixin spacer($prefix: m, $property: margin, $breakpoints: $grid-breakpoints) {
 @each $breakpoint in map-keys($breakpoints) {
  $infix: breakpoint-infix($breakpoint, $breakpoints);

  @each $name, $size in $sizes {
   @include media-breakpoint-up($breakpoint) {
    .#{$prefix}-#{$name}#{$infix} {
     #{$property}: map-get($sizes, $name) !important;
    }
    .#{$prefix}-t-#{$name}#{$infix} {
     #{$property}-top: map-get($sizes, $name) !important;
    }
    .#{$prefix}-r-#{$name}#{$infix} {
     #{$property}-right: map-get($sizes, $name) !important;
    }
    .#{$prefix}-b-#{$name}#{$infix} {
     #{$property}-bottom: map-get($sizes, $name) !important;
    }
    .#{$prefix}-l-#{$name}#{$infix} {
     #{$property}-left: map-get($sizes, $name) !important;
    }
   }
  }

  @include media-breakpoint-up($breakpoint) {
   .#{$prefix}-auto#{$infix} {
    #{$property}: auto !important;
   }
   .#{$prefix}-t-auto#{$infix} {
    #{$property}-top: auto !important;
   }
   .#{$prefix}-r-auto#{$infix} {
    #{$property}-right: auto !important;
   }
   .#{$prefix}-b-auto#{$infix} {
    #{$property}-bottom: auto !important;
   }
   .#{$prefix}-l-auto#{$infix} {
    #{$property}-left: auto !important;
   }
  }
 }
}
@include spacer();
@include spacer(p, padding);


.separator-bottom{
  box-shadow: inset 0 -1px 0 0 var(--c8y-root-component-border-color);
}

.sr-only,
.cdk-visually-hidden {
  position: absolute !important;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0;
}